{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "640a7aa4-7bcd-422d-b0d1-88f5799e1aa1",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import csv\n",
    "import re\n",
    "from datetime import datetime, timedelta\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "FILENAME = 'transactions.csv'\n",
    "SALARY_FILE = 'salaries.csv'\n",
    "\n",
    "transaction_fields = ['username', 'amount', 'category', 'date']\n",
    "salary_fields = ['username', 'salary', 'balance']\n",
    "\n",
    "# Regular expressions for validation\n",
    "USERNAME_REGEX = r'^[a-zA-Z0-9_]{3,15}$'\n",
    "AMOUNT_REGEX = r'^\\d+(\\.\\d{1,2})?$'\n",
    "CATEGORY_REGEX = r'^[a-zA-Z\\s]+$'\n",
    "DATE_REGEX = r'^\\d{4}-\\d{2}-\\d{2}$'\n",
    "\n",
    "# Validation Functions\n",
    "def is_valid_username(username):\n",
    "    return bool(re.match(USERNAME_REGEX, username))\n",
    "\n",
    "def is_valid_amount(amount):\n",
    "    return bool(re.match(AMOUNT_REGEX, str(amount)))\n",
    "\n",
    "def is_valid_category(category):\n",
    "    return bool(re.match(CATEGORY_REGEX, category))\n",
    "\n",
    "def is_valid_date(date):\n",
    "    return bool(re.match(DATE_REGEX, date))\n",
    "\n",
    "# CSV Initialization\n",
    "def initialize_csvs():\n",
    "    for file_name, fields in [(FILENAME, transaction_fields), (SALARY_FILE, salary_fields)]:\n",
    "        try:\n",
    "            with open(file_name, 'x', newline='') as file:\n",
    "                writer = csv.DictWriter(file, fieldnames=fields)\n",
    "                writer.writeheader()\n",
    "        except FileExistsError:\n",
    "            pass\n",
    "\n",
    "# Salary Functions\n",
    "def set_salary(username, salary):\n",
    "    updated = False\n",
    "    salaries = []\n",
    "\n",
    "    try:\n",
    "        with open(SALARY_FILE, 'r', newline='') as file:\n",
    "            reader = csv.DictReader(file)\n",
    "            for row in reader:\n",
    "                if row['username'] == username:\n",
    "                    row['salary'] = str(salary)\n",
    "                    row['balance'] = str(salary)\n",
    "                    updated = True\n",
    "                salaries.append(row)\n",
    "    except FileNotFoundError:\n",
    "        pass\n",
    "\n",
    "    if not updated:\n",
    "        salaries.append({'username': username, 'salary': str(salary), 'balance': str(salary)})\n",
    "\n",
    "    with open(SALARY_FILE, 'w', newline='') as file:\n",
    "        writer = csv.DictWriter(file, fieldnames=salary_fields)\n",
    "        writer.writeheader()\n",
    "        writer.writerows(salaries)\n",
    "\n",
    "def get_balance(username):\n",
    "    try:\n",
    "        with open(SALARY_FILE, 'r', newline='') as file:\n",
    "            reader = csv.DictReader(file)\n",
    "            for row in reader:\n",
    "                if row['username'] == username:\n",
    "                    return float(row['balance'])\n",
    "    except FileNotFoundError:\n",
    "        return 0\n",
    "    return 0\n",
    "\n",
    "def update_balance(username, new_balance):\n",
    "    salaries = []\n",
    "    try:\n",
    "        with open(SALARY_FILE, 'r', newline='') as file:\n",
    "            reader = csv.DictReader(file)\n",
    "            for row in reader:\n",
    "                if row['username'] == username:\n",
    "                    row['balance'] = str(new_balance)\n",
    "                salaries.append(row)\n",
    "    except FileNotFoundError:\n",
    "        pass\n",
    "\n",
    "    with open(SALARY_FILE, 'w', newline='') as file:\n",
    "        writer = csv.DictWriter(file, fieldnames=salary_fields)\n",
    "        writer.writeheader()\n",
    "        writer.writerows(salaries)\n",
    "\n",
    "# Transaction Functions\n",
    "def add_transaction(username, amount, category, date, silent=False):\n",
    "    current_balance = get_balance(username)\n",
    "\n",
    "    if amount > current_balance:\n",
    "        if not silent:\n",
    "            print(\"‚ùå Not enough balance! Transaction cancelled.\")\n",
    "        return False  # Important change: Return False if transaction failed\n",
    "\n",
    "    transaction = {\n",
    "        'username': username,\n",
    "        'amount': f\"{amount:.2f}\",\n",
    "        'category': category,\n",
    "        'date': date\n",
    "    }\n",
    "\n",
    "    with open(FILENAME, 'a', newline='') as file:\n",
    "        writer = csv.DictWriter(file, fieldnames=transaction_fields)\n",
    "        writer.writerow(transaction)\n",
    "\n",
    "    update_balance(username, current_balance - amount)\n",
    "\n",
    "    if not silent:\n",
    "        print(f\"‚úÖ Transaction added! Remaining balance: ‚Çπ{current_balance - amount:.2f}\")\n",
    "    return True  # Important change: Return True if transaction successful\n",
    "\n",
    "def daily_items_between_dates(username, item_name, amount, start_date, end_date):\n",
    "    total_spent = 0\n",
    "    date = start_date\n",
    "    successful_days = 0\n",
    "\n",
    "    while date <= end_date:\n",
    "        success = add_transaction(username, amount, item_name, date.strftime(\"%Y-%m-%d\"), silent=True)\n",
    "        if success:\n",
    "            total_spent += amount\n",
    "            successful_days += 1\n",
    "        else:\n",
    "            print(f\"‚ö†Ô∏è Stopped adding transactions after {date.strftime('%Y-%m-%d')} due to insufficient balance.\")\n",
    "            break\n",
    "        date += timedelta(days=1)\n",
    "\n",
    "    if successful_days > 0:\n",
    "        print(f\"‚úÖ {item_name.capitalize()} transactions added for {successful_days} day(s).\")\n",
    "    else:\n",
    "        print(f\"‚ö†Ô∏è No transactions were added due to insufficient balance.\")\n",
    "\n",
    "    return total_spent\n",
    "\n",
    "def view_transactions(username, date=None):\n",
    "    try:\n",
    "        with open(FILENAME, 'r', newline='') as file:\n",
    "            reader = csv.DictReader(file)\n",
    "            print(f\"\\nüìú Transactions for {username}:\")\n",
    "            found = False\n",
    "            for row in reader:\n",
    "                if row['username'] == username and (date is None or row['date'] == date):\n",
    "                    print(f\"üóìÔ∏è {row['date']} | üõí {row['category']} | üí∏ ‚Çπ{row['amount']}\")\n",
    "                    found = True\n",
    "            if not found:\n",
    "                print(\"No transactions found.\")\n",
    "    except FileNotFoundError:\n",
    "        print(\"‚ö†Ô∏è No transactions recorded yet.\")\n",
    "\n",
    "# Graph Function\n",
    "def show_graphs(username):\n",
    "    try:\n",
    "        df = pd.read_csv(FILENAME, on_bad_lines='skip')\n",
    "        user_data = df[df['username'] == username]\n",
    "\n",
    "        if user_data.empty:\n",
    "            print(\"‚ö†Ô∏è No transactions to display graphs.\")\n",
    "            return\n",
    "\n",
    "        # Graph 1: Most Frequent Expense Categories\n",
    "        category_counts = user_data['category'].value_counts()\n",
    "\n",
    "        plt.figure(figsize=(10, 6))\n",
    "        category_counts.plot(kind='barh', color='skyblue')\n",
    "        plt.xlabel('Number of Transactions')\n",
    "        plt.title('Most Frequent Expense Categories')\n",
    "        plt.gca().invert_yaxis()\n",
    "        plt.tight_layout()\n",
    "        plt.show()\n",
    "\n",
    "        # Graph 2: Average Spending Per Category\n",
    "        user_data['amount'] = pd.to_numeric(user_data['amount'], errors='coerce')\n",
    "        avg_spending = user_data.groupby('category')['amount'].mean()\n",
    "\n",
    "        plt.figure(figsize=(10, 6))\n",
    "        plt.scatter(avg_spending.index, avg_spending.values, color='green')\n",
    "        plt.xticks(rotation=90)\n",
    "        plt.ylabel('Average Amount Spent')\n",
    "        plt.title('Average Spending Per Category')\n",
    "        plt.tight_layout()\n",
    "        plt.show()\n",
    "\n",
    "    except FileNotFoundError:\n",
    "        print(\"‚ö†Ô∏è No transaction file found.\")\n",
    "\n",
    "# Main CLI\n",
    "def main():\n",
    "    initialize_csvs()\n",
    "\n",
    "    while True:\n",
    "        username = input(\"\\nEnter username (or 'exit' to quit): \").strip()\n",
    "        if username.lower() == 'exit':\n",
    "            break\n",
    "\n",
    "        if not is_valid_username(username):\n",
    "            print(\"‚ö†Ô∏è Invalid username. It must be alphanumeric, 3-15 characters.\")\n",
    "            continue\n",
    "\n",
    "        current_balance = get_balance(username)\n",
    "        if current_balance == 0:\n",
    "            try:\n",
    "                salary = float(input(\"Enter your salary or deposit amount to start: ‚Çπ\"))\n",
    "                if salary > 0:\n",
    "                    set_salary(username, salary)\n",
    "                    print(f\"üí∞ ‚Çπ{salary} added for {username}. You can now make transactions.\")\n",
    "                else:\n",
    "                    print(\"‚ö†Ô∏è Invalid amount. Salary must be greater than zero.\")\n",
    "                    continue\n",
    "            except ValueError:\n",
    "                print(\"‚ö†Ô∏è Invalid input.\")\n",
    "                continue\n",
    "        else:\n",
    "            print(f\"Current balance for {username}: ‚Çπ{current_balance:.2f}\")\n",
    "\n",
    "        while True:\n",
    "            print(\"\\nüëâ What would you like to record?\")\n",
    "            print(\"1. Daily repeated item (e.g., milk, vegetables)\")\n",
    "            print(\"2. Rare/specific item (e.g., phone, furniture)\")\n",
    "            choice = input(\"Enter choice (1 or 2): \").strip()\n",
    "\n",
    "            if choice == '1':\n",
    "                item_name = input(\"Enter daily item name: \").strip()\n",
    "                amount = input(f\"Enter daily spending amount for {item_name}: ‚Çπ\").strip()\n",
    "                if not is_valid_amount(amount):\n",
    "                    print(\"‚ö†Ô∏è Invalid amount.\")\n",
    "                    continue\n",
    "                amount = float(amount)\n",
    "\n",
    "                start_date_str = input(\"Enter start date (YYYY-MM-DD): \").strip()\n",
    "                end_date_str = input(\"Enter end date (YYYY-MM-DD): \").strip()\n",
    "\n",
    "                if not (is_valid_date(start_date_str) and is_valid_date(end_date_str)):\n",
    "                    print(\"‚ö†Ô∏è Invalid date format.\")\n",
    "                    continue\n",
    "\n",
    "                start_date = datetime.strptime(start_date_str, \"%Y-%m-%d\")\n",
    "                end_date = datetime.strptime(end_date_str, \"%Y-%m-%d\")\n",
    "\n",
    "                if start_date > end_date:\n",
    "                    print(\"‚ö†Ô∏è Start date must be before end date.\")\n",
    "                    continue\n",
    "\n",
    "                total_spent = daily_items_between_dates(username, item_name, amount, start_date, end_date)\n",
    "                print(f\"‚úÖ Total spent on {item_name}: ‚Çπ{total_spent:.2f}\")\n",
    "\n",
    "            elif choice == '2':\n",
    "                item_name = input(\"Enter rare/specific item name: \").strip()\n",
    "                amount = input(f\"Enter amount spent on {item_name}: ‚Çπ\").strip()\n",
    "                if not is_valid_amount(amount):\n",
    "                    print(\"‚ö†Ô∏è Invalid amount.\")\n",
    "                    continue\n",
    "                amount = float(amount)\n",
    "\n",
    "                date_str = input(\"Enter purchase date (YYYY-MM-DD): \").strip()\n",
    "                if not is_valid_date(date_str):\n",
    "                    print(\"‚ö†Ô∏è Invalid date format.\")\n",
    "                    continue\n",
    "\n",
    "                add_transaction(username, amount, item_name, date_str)\n",
    "\n",
    "            else:\n",
    "                print(\"‚ö†Ô∏è Invalid choice. Please select 1 or 2.\")\n",
    "                continue\n",
    "\n",
    "            # After adding transactions\n",
    "            view_option = input(\"\\nDo you want to view your transactions? (y/n): \").strip().lower()\n",
    "            if view_option == 'y':\n",
    "                view_transactions(username)\n",
    "\n",
    "            graph_option = input(\"\\nüìä Do you want to view your most frequent expense categories and average spending per category? (y/n): \").strip().lower()\n",
    "            if graph_option == 'y':\n",
    "                show_graphs(username)\n",
    "\n",
    "            break\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "    main()\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python [conda env:base] *",
   "language": "python",
   "name": "conda-base-py"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
